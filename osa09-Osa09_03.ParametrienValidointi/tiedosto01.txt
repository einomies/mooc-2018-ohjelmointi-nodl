Metodit ja konstruktorit voivat heitt‰‰ poikkeuksia. Heitett‰vi‰ poikkeuksia on karkeasti ottaen kahdenlaisia. On poikkeuksia jotka on pakko k‰sitell‰, ja on poikkeuksia joita ei ole pakko k‰sitell‰. Poikkeukset k‰sitell‰‰n joko try-catch -lohkossa, tai heitt‰m‰ll‰ ne ulos metodista.
Alla olevassa esimerkiss‰ luetaan parametrina annetun tiedoston rivit yksitellen. Tiedoston lukeminen saattaa heitt‰‰ poikkeuksen -- voi olla, ettei tiedostoa esimerkiksi lˆydy, tai voi olla ettei siihen ole lukuoikeuksia. T‰llainen poikkeus tulee k‰sitell‰. Poikkeuksen k‰sittely tapahtuu try-catch -lauseella. Seuraavassa esimerkiss‰ emme juurikaan v‰lit‰ poikkeustilanteesta, mutta tulostamme kuitenkin poikkeukseen liittyv‰n viestin.
Ohjelmoija voi myˆs j‰tt‰‰ poikkeuksen k‰sittelem‰tt‰ ja siirt‰‰ vastuun poikkeuksen k‰sittelyst‰ metodin kutsujalle. Vastuun siirto tapahtuu heitt‰m‰ll‰ poikkeus metodista eteenp‰in lis‰‰m‰ll‰ t‰st‰ tieto metodin m‰‰rittelyyn. Tieto poikkeuksen heitosta -- throws PoikkeusTyyppi, miss‰ poikkeustyyppi esimerkiksi Exception -- lis‰t‰‰n ennen metodirungon avaavaa aaltosulkua.
Nyt metodia lue kutsuvan metodin tulee joko k‰sitell‰ poikkeus try-catch -lohkossa tai siirt‰‰ poikkeuksen k‰sittelyn vastuuta eteenp‰in. Joskus poikkeuksen k‰sittely‰ v‰ltet‰‰n viimeiseen asti, ja main-metodikin heitt‰‰ poikkeuksen k‰sitelt‰v‰ksi eteenp‰in:
T‰llˆin mahdollinen poikkeus p‰‰tyy ohjelman suorittajalle eli Javan virtuaalikoneelle, joka keskeytt‰‰ ohjelman suorituksen poikkeukseen johtavan virheen tapahtuessa.